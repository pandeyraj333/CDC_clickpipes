# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1epBGaxkQ73viznYOqbbhEA85y5NVqfsF
"""

import streamlit as st
import pandas as pd
import time
import clickhouse_connect

# ------------------------------
# ✅ ClickHouse Cloud Credentials
# ------------------------------
client = clickhouse_connect.get_client(
    host='xr9uc81b3l.us-east-1.aws.clickhouse.cloud',
    user='default',
    password='Manjag@12345',  # 🔁 Replace this with your actual password
    secure=True
)

# Auto-refresh every 2 minutes
st.experimental_set_query_params(update=int(time.time() // 120))

# ------------------------------
# 🔹 App Title
# ------------------------------
st.title("🌤️ Mumbai Weather Dashboard (Live, IST)")
st.caption("Powered by MySQL → ClickPipes → ClickHouse Cloud → Streamlit")

# ------------------------------
# 🔹 Visual 1: 2-minute Trend Chart
# ------------------------------
st.subheader("📈 Temperature Trends (Every 2 Minutes)")

query_mv = """
SELECT *
FROM temp_trend_mv
ORDER BY interval_time_ist DESC
LIMIT 30
"""
mv_result = client.query(query_mv)
df_mv = pd.DataFrame(mv_result.result_rows, columns=mv_result.column_names)
df_mv = df_mv.sort_values("interval_time_ist")

st.line_chart(df_mv.set_index("interval_time_ist")[["avg_temp", "min_temp", "max_temp"]])

with st.expander("📄 View Aggregated Data"):
    st.dataframe(df_mv)

# ------------------------------
# 🔹 Visual 2: Latest Weather Snapshot
# ------------------------------
st.subheader("🌡️ Latest Live Weather Snapshot")

query_latest = """
SELECT
    city,
    temperature,
    humidity,
    weather_description,
    timestamp + INTERVAL 5 HOUR 30 MINUTE AS ist_time
FROM weather_data
ORDER BY timestamp DESC
LIMIT 1
"""
latest_result = client.query(query_latest)
latest_df = pd.DataFrame(latest_result.result_rows, columns=latest_result.column_names)

if not latest_df.empty:
    row = latest_df.iloc[0]
    st.metric(label="Temperature (°C)", value=f"{row['temperature']}°")
    st.metric(label="Humidity (%)", value=f"{row['humidity']}%")
    st.write(f"**Description:** {row['weather_description']}")
    st.write(f"**Updated at:** {row['ist_time']} IST")
else:
    st.warning("No data found in `weather_data`.")
